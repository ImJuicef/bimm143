---
title: "Class6Rfunctions"
author: "Josef Urrete"
format: pdf
date: 2023-04-21
---

Developing our own R function to calculate average grades.

Starting with simple version of the problem #Simplified version

# Simplified problem

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Start by calculating average score of homeworks

```{r}
mean(student1)
```

```{r}
mean(student1, na.rm = T)
```

Getting minimum score via which.min 
```{r}
which.min(student1)
```

Return everything but the lowest score
```{r}
student1[-8]
```

averaging first 7 homework scores excludes the 8th element minimum
```{r}
mean(student1[1:7])
```

trying to generalize the function for any student that doesn't have the 8th element as the minimum score
```{r}
mean(student1[-which.min(student1)])
```

```{r}
student1_drop_min = student1[-which.min(student1)]
```

```{r}
mean(student1_drop_min)
```

First working snippet above, try with student2 

```{r}
student2_drop_min <- student2[-which.min(student2)]
student2_drop_min
```

```{r}
mean(student2, na.rm=T)
```

```{r}
mean(student2_drop_min, na.rm = TRUE)
```

```{r}
mean(student3, na.rm = T)
```

Problem is for student 3, it does not take into account that we only drop the lowest score

try to find position of NA
```{r}
is.na(student2)
```

```{r}
which(is.na(student3))
```

```{r}
which(is.na(student2))
```

```{r}
student2[(is.na(student2))] <- 0
student2
```
where NA used to be, is now a 0

Take this snippet and use it for student3
```{r}
student3[(is.na(student3))] <- 0
student3
```

```{r}
mean(student3)
```

This s our final working snippet of code for all students (with and without NA values)

```{r}
student3_drop_min <- student3[-which.min(student3)]
mean(student3_drop_min)
```

# Generalize some more, build a function

```{r}
x <- c(100,75,50,NA)
x[ is.na(x)] <- 0 
x_drop_min <- x[-which.min(x)]
mean(x_drop_min)
```

Write as a function
```{r}
#' Title
#'
#' @param x A numeric vector of homework scores
#'
#' @returnthe average value of homework scores
#' @export
#'
#' @examples
#' 
#' student <- c('100', '50', NA)
#' grade(student)
#' 
grade <- function(x) {
  # Mask NA values with zero
  x[ is.na(x)] <- 0 
  # taking the mean after drop lowest score
  mean(x[-which.min(x)])
}
```

Test
```{r}
grade(student1)
```
```{r}
grade(student2)
```

```{r}
grade(student3)
```

# Q1
make grade function see above

Purpose is to calculate the average score fora. vector of student scores, with their lowest score dropped and missing values treated as zero

# applying function to a gradebook from URL: "http://tinyurl.com/gradeinput"
```{r}
URL <- "http://tinyurl.com/gradeinput"
gradebook <- read.csv(URL, row.names =1)
head(gradebook)
```

```{r}
apply(gradebook, 1, grade)
```
#Q2 who is top scoring student overall in gradebook
```{r}
which.max(apply(gradebook,1,grade))
```

```{r}
max(apply(gradebook,1,grade))
```

The max score is from student 18, which is 94.5

#Q3. Which homework was toughest on students (obtained lowest scores overall)



```{r}
is.na(gradebook)
```
First, mask NA values with zeroes
```{r}
gradebook[is.na(gradebook)] <- 0
gradebook
```
apply mean function to gradebook
```{r}
apply(gradebook, 2,mean)
```

The toughest homework is HW2 considering the mean and considering missing homework as zero. It is possible that having missing homework as zero is too strict and is not good for representing homework difficulty overall.

remove missing values
```{r}
avg.scores <- apply(gradebook, 2, mean, na.rm=TRUE)
avg.scores
```

```{r}
apply(gradebook, 2, median, na.rm = TRUE)
```
```{r}
boxplot(gradebook)
```

# Q4 are final results correlated with results for individual homework assignments

```{r}
masked.gradebook <- gradebook
masked.gradebook[is.na(masked.gradebook)] <- 0
masked.gradebook  
```

The maximum value is

```{r}
which.max(apply(gradebook, 2, cor, y=masked.gradebook))
```



# Q5 knit to pdf